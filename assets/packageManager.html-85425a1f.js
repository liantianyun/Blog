import{_ as e,p as n,q as a,a1 as d}from"./framework-5866ffd3.js";const p={},i=d(`<h1 id="关于前端包管理" tabindex="-1"><a class="header-anchor" href="#关于前端包管理" aria-hidden="true">#</a> 关于前端包管理</h1><p>当我们进行前端项目开发的时候，项目会依赖许多他人开发的模块，我们知道，他们会被放到node_module文件夹中。同时我们也知道，我们项目的直接依赖，本身也有其自身的依赖，从一个项目的依赖开始遍历，最终是可以形成一颗依赖树的。</p><p>这时候，假如你是一个包管理工具的作者，你要思考的问题就是如何安装这些依赖，你的目标可以拆分为三点：</p><ul><li>依赖被安装到正确位置，使每个导入语句能按照查找规则找到正确版本的依赖</li><li>尽可能快的安装</li><li>尽可能小的占用磁盘空间</li></ul><p>为了实现功能，其中，这里面只有第一点是必须要满足的目标，另外两点则是优化目标。</p><p>我们从npm2开始，看看这些包管理工具都是怎么做的。</p><h3 id="npm2" tabindex="-1"><a class="header-anchor" href="#npm2" aria-hidden="true">#</a> npm2</h3><p>npm2的方式是很简单直接的，递归安装，例如，如果A依赖了B，B又依赖了C，那么最终，安装出来的依赖结构就是这样的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── A.js
└── node_module
    ├── node_module
    |   └── C.js 
    └── B.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种解决方案非常的直观，符合直觉，node_module文件夹本身形成的树形结构跟依赖树的结构是一致的，所有模块直接到该模块根目录的node_module中即可找到对应依赖。</p><p>但这样也有一些显而易见的缺点，那就是依赖的体积也太大了，项目一大，依赖的层级会很深，并且有一些库我们知道有可能会被许多库引用，比如说所有基于vue的库都必然需要依赖vue，假如说我们直接依赖了十个这样的库，那相当于这十个库的node_module中都存放了一份vue的副本，假如这些vue版本都一致，那么显而易见，这是一种冗余。</p><p>那么思考下如何优化，实际上，我们只需要一份放在这十个项目的父级目录内的vue依赖就可以了。因此，到了npm3，这种缺陷明显的递归安装方式，按照这个优化思路被改进了。</p><h3 id="npm3" tabindex="-1"><a class="header-anchor" href="#npm3" aria-hidden="true">#</a> npm3</h3><p>在npm3安装依赖时，会将各模块的依赖统统安装在项目外层，遇到重复模块，则丢弃，不再重新安装，当遇到版本不兼容的问题时，则继续采用npm2的方式，将冲突模块安装到内层目录的node_module中去，如此一来，包安装的顺序速度则大大增加了。当然，任何事物都是有二元性的，由于这种算法的优化，那么npm3也会出现一些npm2所没有的缺点：在开始安装之前，npm必须先分析解析依赖树，并决定，哪些依赖放第一层，哪些放内层，这明显是个耗时的操作（这个耗时是指相对于npm2多了这一步的时间耗费）。</p><h3 id="pnpm" tabindex="-1"><a class="header-anchor" href="#pnpm" aria-hidden="true">#</a> pnpm</h3><p>pnpm则是从另一个思路提升每个项目的安装速度，我们知道，npm本身是有缓存压缩包的，npm安装缓存中存在的包时，相当于解压一份到具体项目中去，但实际上，操作系统的文件系统，是支持“文件链接”这样一种技术的，简单的讲，假设在文件中已经存在了某个文件，那么之后不管在哪个目录内想访问这个文件，都是没必要在那个目录内再次创建一份相同的文件的，跟操作系统说，我要一份那个文件的的“链接”，之后通过这个链接，去找对应的文件就可以了。 按照这个思路，pnpm的安装依赖安装的实际过程，则变成了一个链接建立的过程，只有某个包在本机第一次被安装时才需要去下载，在之后的不管哪个项目的安装中，对于这个包都是不需要重新安装的。这在多项目协作的场景中，非常有用，对于磁盘空间的节省和安装速度的提升都是显而易见的。</p><h3 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h3><p>em...这篇文章是分两次写的，写的过程中，自己阅读了很多其它博客，等我弄懂了，感觉也没必要写我这个了，因为其它人已经写很好了...O(∩_∩)O。不过，都已经动笔了，因此还是坚持写完了。也说明一个道理，写博客其实是一个通过输出倒逼输入的过程，一起加油。</p>`,18),r=[i];function l(s,m){return n(),a("div",null,r)}const c=e(p,[["render",l],["__file","packageManager.html.vue"]]);export{c as default};
