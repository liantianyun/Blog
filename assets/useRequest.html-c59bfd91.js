import{_ as n,p as s,q as a,a1 as p}from"./framework-5866ffd3.js";const t="/assets/useRequest_entry-80e91b76.png",e={},o=p('<h1 id="userequest-基础用法" tabindex="-1"><a class="header-anchor" href="#userequest-基础用法" aria-hidden="true">#</a> useRequest - 基础用法</h1><p>useRequest是ahooks里面最核心的一个hooks，也是使用最高频、功能最丰富、最为复杂的一个hooks。</p><p>官方对其的介绍为：</p><p><code>useRequest</code> 是一个强大的异步数据管理的 Hooks，React 项目中的网络请求场景使用 <code>useRequest</code> 就够了。</p><p><code>useRequest</code> 通过插件式组织代码，核心代码极其简单，并且可以很方便的扩展出更高级的功能。目前已有能力包括：</p><ul><li>自动请求/手动请求</li><li>轮询</li><li>防抖</li><li>节流</li><li>屏幕聚焦重新请求</li><li>错误重试</li><li>loading delay</li><li>SWR(stale-while-revalidate)</li><li>缓存</li></ul><p>注意这句话：<code>useRequest</code> 通过插件式组织代码，核心代码极其简单，并且可以很方便的扩展出更高级的功能。</p><p>也就是说，虽然<code>useRequest</code>功能很丰富，但是核心代码很简单，而很多丰富的功能是通过插件来实现的，在这之前我还没有学习过插件的实现机制，今天正好来学习一下，首先我们来看下<code>useRequest</code>的核心代码。</p><p>先看看<code>useRequest</code>这个hooks的项目结构：</p><p><img src="'+t+`" alt=""></p><p>入口文件在useRequest.ts,我们看下它内部的核心代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> useRequest<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">service</span><span class="token operator">:</span> Service<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> Options<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  plugins<span class="token operator">?</span><span class="token operator">:</span> Plugin<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> useRequestImplement<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span><span class="token punctuation">(</span>plugins <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    useDebouncePlugin<span class="token punctuation">,</span>
    useLoadingDelayPlugin<span class="token punctuation">,</span>
    usePollingPlugin<span class="token punctuation">,</span>
    useRefreshOnWindowFocusPlugin<span class="token punctuation">,</span>
    useThrottlePlugin<span class="token punctuation">,</span>
    useAutoRunPlugin<span class="token punctuation">,</span>
    useCachePlugin<span class="token punctuation">,</span>
    useRetryPlugin<span class="token punctuation">,</span>
  <span class="token punctuation">]</span> <span class="token keyword">as</span> Plugin<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> useRequest<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>入口文件的代码很简单，用户在使用useRequest时，会传入三个参数，其中，第一个参数是一个异步函数，第二个参数是Options，第三个参数则是一个plugins列表，这里直接调用useRequestImplement并将参数透传进去，同时，第三个参数里合并了ahooks内部已经实现的plugins，因此，我们可以推测useRequestImplement内部是实现了插件的注册的。</p><p>我们看下useRequestImplement的代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> useRequestImplement<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">service</span><span class="token operator">:</span> Service<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> Options<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> Plugin<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> manual <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>
  <span class="token comment">// 1. 用户传入的options构造fetchOptions</span>
  <span class="token keyword">const</span> fetchOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
    manual<span class="token punctuation">,</span>
    <span class="token operator">...</span>rest<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. 使用ref保存成传入的异步函数</span>
  <span class="token keyword">const</span> serviceRef <span class="token operator">=</span> <span class="token function">useLatest</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. 得到一个使组件重新渲染的update方法</span>
  <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">useUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 3. 在首次调用该组件时，用new Fetch构建一个fetch实例</span>
  <span class="token keyword">const</span> fetchInstance <span class="token operator">=</span> <span class="token function">useCreation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> initState <span class="token operator">=</span> plugins<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p<span class="token operator">?.</span>onInit<span class="token operator">?.</span><span class="token punctuation">(</span>fetchOptions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fetch</span><span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">(</span>
      serviceRef<span class="token punctuation">,</span>
      fetchOptions<span class="token punctuation">,</span>
      update<span class="token punctuation">,</span>
      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>initState<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 4. 用户传入的options保存在fetchInstance的options选项上</span>
  fetchInstance<span class="token punctuation">.</span>options <span class="token operator">=</span> fetchOptions<span class="token punctuation">;</span>
  <span class="token comment">// run all plugins hooks</span>
  <span class="token comment">// 5. 依次调用hooks，将fetch实例和options作为传入传入，并赋值到pluginImpls属性上，我们可以猜测，正是在这一步完成了插件的注册</span>
  fetchInstance<span class="token punctuation">.</span>pluginImpls <span class="token operator">=</span> plugins<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">,</span> fetchOptions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 6. 如果options中manual不为true，首次渲染完成后自动执行fetchInstance的run方法</span>
  <span class="token function">useMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>manual<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// useCachePlugin can set fetchInstance.state.params from cache when init</span>
      <span class="token keyword">const</span> params <span class="token operator">=</span> fetchInstance<span class="token punctuation">.</span>state<span class="token punctuation">.</span>params <span class="token operator">||</span> options<span class="token punctuation">.</span>defaultParams <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// @ts-ignore</span>
      fetchInstance<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 7. 组件卸载时可能有请求正在进行，调用一下cancel方法取消请求。 </span>
  <span class="token function">useUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    fetchInstance<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 8. 返回对外暴露的api。</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loading</span><span class="token operator">:</span> fetchInstance<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loading<span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> fetchInstance<span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
    <span class="token literal-property property">error</span><span class="token operator">:</span> fetchInstance<span class="token punctuation">.</span>state<span class="token punctuation">.</span>error<span class="token punctuation">,</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> fetchInstance<span class="token punctuation">.</span>state<span class="token punctuation">.</span>params <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">cancel</span><span class="token operator">:</span> <span class="token function">useMemoizedFn</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">refresh</span><span class="token operator">:</span> <span class="token function">useMemoizedFn</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">refreshAsync</span><span class="token operator">:</span> <span class="token function">useMemoizedFn</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">.</span><span class="token function">refreshAsync</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">run</span><span class="token operator">:</span> <span class="token function">useMemoizedFn</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">runAsync</span><span class="token operator">:</span> <span class="token function">useMemoizedFn</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mutate</span><span class="token operator">:</span> <span class="token function">useMemoizedFn</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fetchInstance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token keyword">as</span> Result<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> useRequestImplement<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码里，分别用注释表明了对应的代码在干什么。</p><p>我们在集中提取出来看看，会更加明显的看到代码的逻辑顺序：</p><ol><li>用户传入的options构造fetchOptions</li><li>使用ref保存成传入的异步函数</li><li>在首次调用该组件时，用new Fetch构建一个fetch实例</li><li>将fetchOptions保存在fetchInstance的options属性上</li><li>依次调用hooks，将fetch实例和options作为传入传入，并赋值到pluginImpls属性上，我们可以猜测，正是在这一步完成了插件的注册</li><li>如果options中manual不为true，首次渲染完成后自动执行fetchInstance的run方法</li><li>组件卸载时可能有请求正在进行，调用一下cancel方法取消请求。</li><li>返回对外暴露的api。</li></ol><p>所以useRequestImplement这个函数内的代码大概就是做了这几件事，我们可以看出，这里的核心逻辑是new Fetch得到fetch实例，因此要进一步探究，则要看Fetch的内部的实现。</p><p>其中核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> isFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../utils&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> type <span class="token punctuation">{</span> MutableRefObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> type <span class="token punctuation">{</span> FetchState<span class="token punctuation">,</span> Options<span class="token punctuation">,</span> PluginReturn<span class="token punctuation">,</span> Service<span class="token punctuation">,</span> Subscribe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Fetch</span><span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">pluginImpls</span><span class="token operator">:</span> PluginReturn<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token literal-property property">state</span><span class="token operator">:</span> FetchState<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token keyword">public</span> <span class="token literal-property property">serviceRef</span><span class="token operator">:</span> MutableRefObject<span class="token operator">&lt;</span>Service<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> <span class="token literal-property property">options</span><span class="token operator">:</span> Options<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> <span class="token literal-property property">subscribe</span><span class="token operator">:</span> Subscribe<span class="token punctuation">,</span>
    <span class="token keyword">public</span> <span class="token literal-property property">initState</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>FetchState<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span>
      <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>manual<span class="token punctuation">,</span>
      <span class="token operator">...</span>initState<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">s</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>FetchState<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span>
      <span class="token operator">...</span>s<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">event</span><span class="token operator">:</span> keyof PluginReturn<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// @ts-ignore</span>
    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pluginImpls<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token operator">:</span> TParams<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>TData<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> currentCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span>
      stopNow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      returnNow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>state
    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onBefore&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// stop request</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stopNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      params<span class="token punctuation">,</span>
      <span class="token operator">...</span>state<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// return now</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>returnNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onBefore<span class="token operator">?.</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// replace service</span>
      <span class="token keyword">let</span> <span class="token punctuation">{</span> servicePromise <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onRequest&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serviceRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>servicePromise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        servicePromise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serviceRef<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> servicePromise<span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// prevent run.then when request is canceled</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// const formattedResult = this.options.formatResultRef.current ? this.options.formatResultRef.current(res) : res;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> res<span class="token punctuation">,</span>
        <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
        <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onSuccess<span class="token operator">?.</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onSuccess&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onFinally<span class="token operator">?.</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onFinally&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// prevent run.then when request is canceled</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        error<span class="token punctuation">,</span>
        <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onError<span class="token operator">?.</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onError&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onFinally<span class="token operator">?.</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onFinally&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params<span class="token operator">:</span> TParams</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onCancel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// @ts-ignore</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>params <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">refreshAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// @ts-ignore</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>params <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">mutate</span><span class="token punctuation">(</span>data<span class="token operator">?</span><span class="token operator">:</span> TData <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">oldData<span class="token operator">?</span><span class="token operator">:</span> TData</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TData <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">targetData</span><span class="token operator">:</span> TData <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// @ts-ignore</span>
      targetData <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      targetData <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onMutate&#39;</span><span class="token punctuation">,</span> targetData<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> targetData<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的代码170行左右，其实也很难不算很长，其中，工工整整的api对应的，基本也就是对外的暴露的api的底层实现。</p><p>首先Fetch这个类，维护了一个核心变量state，包含了data、error、loading、params四个参数，我们可以通过api获取到这四个参数的值，并且，其中的setState方法实现如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">s</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>FetchState<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span>
      <span class="token operator">...</span>s<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的subscribe方法就是外层传入的update方法，所以内部调用setState后，组件都会重新渲染，以确保外部得到的值是最新的。</p><p>其中方法中，核心是runAsync方法。</p><p>这里面的核心，也就是:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token operator">:</span> TParams<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>TData<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> currentCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span>
      stopNow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      returnNow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>state
    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onBefore&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// stop request</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stopNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      params<span class="token punctuation">,</span>
      <span class="token operator">...</span>state<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// return now</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>returnNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onBefore<span class="token operator">?.</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// replace service</span>
      <span class="token keyword">let</span> <span class="token punctuation">{</span> servicePromise <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onRequest&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serviceRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>servicePromise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        servicePromise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serviceRef<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> servicePromise<span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// prevent run.then when request is canceled</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// const formattedResult = this.options.formatResultRef.current ? this.options.formatResultRef.current(res) : res;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> res<span class="token punctuation">,</span>
        <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
        <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onSuccess<span class="token operator">?.</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onSuccess&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onFinally<span class="token operator">?.</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onFinally&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// prevent run.then when request is canceled</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        error<span class="token punctuation">,</span>
        <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onError<span class="token operator">?.</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onError&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onFinally<span class="token operator">?.</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onFinally&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码的可读性也很高。</p><p>首先内部定义了一个count变量，这个变量是用来判断请求是否被取消的，当调用了cancel方法后，this.count会+1，而代码中在请求后判断了currentCount !== this.count,如果该条件成立，则说明请求被取消，返回空数据。</p><p>另外，代码中存在大量的类似于：<code>this.options.onBefore?.(params);</code>的代码，这就是向用户通过options暴漏了请求的生命周期的钩子。</p><p>另外，我们也可以通过这个请求的全过程看到插件机制是如何运作的:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>
    stopNow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    returnNow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>state
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPluginHandler</span><span class="token punctuation">(</span><span class="token string">&#39;onBefore&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像类似于这样的代码，而是在对应的请求生命周期执行对应的plugins，并通过该plugin的返回值来干预请求过程，这就是useRequset的插件系统的核心机制。</p><p>至于其它的<code>run</code>、<code>refresh</code>、<code>refreshAsync</code>等方法，内部都是通过<code>runAsync</code>实现对应功能即可。</p><p>请求的流程非常的清晰，跟这几个生命周期对应:<code>onBefore</code>、<code>onSuccess</code>、<code>onError</code>、<code>onFinally</code>分别是请求前、成功后、出现错误时、请求完成后等四个时机。</p><p>在对应的实际分别进行state的维护即可。</p><p>所以useRequest的核心功能确实很简单，流程也很清晰，对比我们不使用它管理异步函数，它的基础功能额外提供了错误处理、loding状态管理、生命周期、取消请求等几个实用的功能。</p>`,38),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(e,[["render",l],["__file","useRequest.html.vue"]]);export{k as default};
