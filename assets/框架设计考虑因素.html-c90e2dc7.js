import{_ as t,p as e,q as l,a1 as n}from"./framework-5866ffd3.js";const d={},r=n('<p>框架设计时需要考虑的内容：</p><ul><li>模块并非相互独立、而是相互关联、相互制约。</li><li>作为学习者，应该从全局的角度对框架的设计有清晰的认知，否则容易被细节困住</li></ul><p>1.1 命令式vs声明式</p><table><thead><tr><th style="text-align:center;">范式</th><th style="text-align:center;">特点</th><th style="text-align:center;">代表</th></tr></thead><tbody><tr><td style="text-align:center;">声明式</td><td style="text-align:center;">关注结果、内部封装过程</td><td style="text-align:center;">Vue、React</td></tr><tr><td style="text-align:center;">命令式</td><td style="text-align:center;">关注过程</td><td style="text-align:center;">Jquery</td></tr></tbody></table><p>1.2 性能vs可维护性</p><p>结论：<strong>声明式代码的性能不优于命令式代码的性能</strong></p><p>命令式框架直接修改dom，声明式框架找出dom变化的差异后修改dom，把直接修改dom的的性能消耗定位为A，找出差异的性能消耗为B，则：</p><ul><li>命令式代码的更新性能消耗 = A</li><li>声明式代码的更新性能消耗 = B + A</li></ul><p>即便B --&gt; 0（理想状况，实际上并无可能），声明式代码最多做到与命令式代码的更新性能消耗相同，无法超越，印证结论。</p><table><thead><tr><th style="text-align:center;">范式</th><th style="text-align:center;">可维护性</th><th style="text-align:center;">性能</th></tr></thead><tbody><tr><td style="text-align:center;">声明式</td><td style="text-align:center;">高</td><td style="text-align:center;">一定程度损失</td></tr><tr><td style="text-align:center;">命令式</td><td style="text-align:center;">低</td><td style="text-align:center;">最高</td></tr></tbody></table><p>框架目标：在保持可维护性的同时让性能损失最小化</p><p>1.3 虚拟Dom的性能到底如何?</p><p>虚拟Dom的出现目的：</p><p>结合1.2中的公式：声明式代码的更新性能消耗 = B + A</p><p>虚拟Dom正是为了令B趋近于0，即找出差异的代价最小化。</p><p><strong>理论上</strong>，虚拟dom的更新性能不可能高于命令式的代码，但绝大多数情况下，用户很难写出完美的命令式代码，当应用规模较大、复杂度较高的时候，如果要写出完美的命令时代码，往往需要耗费开发者巨大的精力，<strong>投入产出比不高</strong>。</p><p>引申：innerHtml方法的性能如何</p><p>innerHtml的性能消耗 = 字符串的拼接计算量 + dom计算量 创建时：</p><table><thead><tr><th style="text-align:center;">消耗层面</th><th style="text-align:center;">innerHmtl方式</th><th style="text-align:center;">声明式框架方式</th></tr></thead><tbody><tr><td style="text-align:center;">js计算层面</td><td style="text-align:center;">字符串拼接</td><td style="text-align:center;">创建新的js对象</td></tr><tr><td style="text-align:center;">dom层面</td><td style="text-align:center;">新建所有dom</td><td style="text-align:center;">新建所有dom</td></tr></tbody></table><p>更新时：</p><table><thead><tr><th style="text-align:center;">消耗层面</th><th style="text-align:center;">innerHmtl方式</th><th style="text-align:center;">声明式框架方式</th></tr></thead><tbody><tr><td style="text-align:center;">js计算层面</td><td style="text-align:center;">字符串拼接</td><td style="text-align:center;">创建新的js对象 + diff</td></tr><tr><td style="text-align:center;">dom层面</td><td style="text-align:center;">销毁所有旧的dom，新建所有dom</td><td style="text-align:center;">根据diff结果进行必要的更新</td></tr><tr><td style="text-align:center;">更新时的影响因素</td><td style="text-align:center;">与模板大小有关</td><td style="text-align:center;">与数据变化量有关</td></tr></tbody></table><p>总结：</p><table><thead><tr><th style="text-align:center;">指标</th><th style="text-align:center;">innerHtml</th><th style="text-align:center;">虚拟dom</th><th style="text-align:center;">命令式代码</th></tr></thead><tbody><tr><td style="text-align:center;">心智负担</td><td style="text-align:center;">中</td><td style="text-align:center;">小</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;">性能</td><td style="text-align:center;">低</td><td style="text-align:center;">中</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;">可维护性</td><td style="text-align:center;">中</td><td style="text-align:center;">高</td><td style="text-align:center;">低</td></tr></tbody></table><p>因此，综合来看，在考虑极端个例的情况下，虚拟dom绝大多数情况下是最优的编程范式。</p><p>1.4 运行时vs编译时</p><p>运行时：只提供render函数，用户调用时，需手动编写描述dom结构的对象 运行时编译：提供compile函数和render函数，运行时，先将用户提供的模板字符串编译为js对象，在调用render函数即可 编译时：直接将template编译成可运行的js代码，运行过程仍然存在，但不再需要框架需要提供render函数完成js对象到dom的转换，而是js运行编译后的代码直接完成该过程</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">优点</th><th style="text-align:center;">缺点</th></tr></thead><tbody><tr><td style="text-align:center;">运行时</td><td style="text-align:center;">不需要编译</td><td style="text-align:center;">无法分析用户输入</td></tr><tr><td style="text-align:center;">运行时+编译时</td><td style="text-align:center;">可以通过编译分析用于输入，提高运行时性能</td><td style="text-align:center;">理论性能低于编译时</td></tr><tr><td style="text-align:center;">编译时</td><td style="text-align:center;">性能最高</td><td style="text-align:center;">缺乏灵活性</td></tr></tbody></table><p>1.5 总结</p><ul><li>讲解了命令式、声明式的定义、分析了各自的特点</li><li>对比了不同编程范式的性能和可维护性</li><li>分析了虚拟dom的性能消耗，并综合对比innerHtml和命令式的心智负担、性能、可维护性等指标，得出虚拟在大多数情况下是最优选择的结论</li><li>分析对比了运行时和编译时的特点和优缺</li></ul>',29),a=[r];function i(s,c){return e(),l("div",null,a)}const g=t(d,[["render",i],["__file","框架设计考虑因素.html.vue"]]);export{g as default};
