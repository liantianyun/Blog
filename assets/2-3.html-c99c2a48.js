import{_ as n,p as s,q as a,a1 as p}from"./framework-5866ffd3.js";const t={},o=p(`<h1 id="实现一个简易计算器" tabindex="-1"><a class="header-anchor" href="#实现一个简易计算器" aria-hidden="true">#</a> 实现一个简易计算器</h1><p>题目:实现一个简易的计算器，支持+、-、*、/四项操作，且符合运算符的优先级。</p><p>思路分析：当我们拿到一个运算表达式时，我们从左往右整个表达式，由于需要支持运算的优先级，也就是说，后面的式子可能需要先被计算，所以，要实现这种<strong>后进先出</strong>的效果，我们需要借助<strong>栈</strong>这种数据结构。</p><p>具体怎么实现呢？</p><ol><li>定义一个临时变量记住栈顶的运算符，因为上一个运算符会影响遇到下一个运算符的处理逻辑</li><li>逐个扫描字符</li><li>如果是非运算符直接入栈</li><li>如果是运算符，则分两种情况</li></ol><ul><li>上一个运算符为+-符号，如果遇到*/运算，继续压栈，否则先计算上一次的结果并将结果和下一个运算符入栈</li><li>上一个运算符为+*/符号，不论下一个遇到了什么操作符，都先计算上一次的结果并将结果和下一个运算符入栈</li></ul><ol start="5"><li>重复上述过程，直到遇到=号后，也是出栈计算结果，直到栈为空</li></ol><p>代码实现如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> plusAndMinus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> MultiplyAndDivide <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> operator <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>plusAndMinus<span class="token punctuation">,</span> <span class="token operator">...</span>MultiplyAndDivide<span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">hanleOperation</span><span class="token punctuation">(</span><span class="token parameter">stack</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> right <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> operator <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> res
    <span class="token keyword">if</span> <span class="token punctuation">(</span>operator <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> left <span class="token operator">+</span> right
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>operator <span class="token operator">===</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> left <span class="token operator">-</span> right
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>operator <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> left <span class="token operator">*</span> right
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>operator <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> left <span class="token operator">/</span> right
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">handlEqual</span><span class="token punctuation">(</span><span class="token parameter">stack</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">hanleOperation</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>
   <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token function">hanleOperation</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> chars <span class="token operator">=</span>  expression<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> stackTopOperator <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">let</span> res
    chars<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res <span class="token operator">=</span> <span class="token function">handlEqual</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>operator<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 上一个运算符为+-符号，如果遇到*/运算，继续压栈，否则先计算上一次的结果</span>
            <span class="token comment">// 上一个运算符为+*/符号，不论遇到了什么操作符，都先运算上一次的结果</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>plusAndMinus<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>stackTopOperator<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  plusAndMinus<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> MultiplyAndDivide<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">hanleOperation</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            stackTopOperator <span class="token operator">=</span> c
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">&#39;3+5*4/2=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我发现做这种题目确实可以加深对于数据结构特性的理解，像这个题，如果没有栈，根本不知道怎么实现这个优先级运算，有了栈以后，问题就迎刃而解了。</p>`,10),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","2-3.html.vue"]]);export{k as default};
