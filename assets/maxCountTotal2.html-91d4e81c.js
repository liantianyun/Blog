import{_ as s,p as a,q as p,Q as t,a1 as n}from"./framework-5866ffd3.js";const o={},e=n(`<h1 id="总和最大区间问题-二-分治法解决" tabindex="-1"><a class="header-anchor" href="#总和最大区间问题-二-分治法解决" aria-hidden="true">#</a> 总和最大区间问题（二）:分治法解决</h1><p>为了便于对照，还是在贴一遍题目:</p><blockquote><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p></blockquote><p>示例：</p><blockquote><p>输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</p><p>输出：6</p><p>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</p></blockquote><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 10**5</li></ul><p>上文列举的两种解法如下：</p><p>解法一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span>
            <span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解法二：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 用一个数组缓存中间结果</span>
        <span class="token keyword">let</span> rowSum <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 用最后一个元素的值加上当前值并缓存结果即可</span>
            rowSum<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rowSum<span class="token punctuation">[</span>rowSum<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 从缓存结果里找出最大值</span>
        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>rowSum<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种解法中，本质上都是用的穷举法，我们其实把所有可能的起始位置和结束位置对应的子数组和都计算了出来，并找到了最大值，两者的区别仅仅是第二种方法中在计算S（i,j）时加入了一个数组缓存计算结果，减少了嵌套了一层O（n）级别的操作，所以把复杂度从<code>O(n**3)</code>降低到了<code>O(n**2)</code>。</p><p>在开始今天进一步探究解法之前，还可以在优化一下解法2的空间复杂度，实际上，既然我们最终的目的是从缓存的结果数组里找出最大值，数组只是作为一个中间值，那我们其实可以在遍历过程中直接记录最大值即可，没必要使用数组保存。</p><p>所以可以把算法优化如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// max代表计算过程中的最大值</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> rowSum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> rowSum<span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 同样是记录到当前额位置的累加值</span>
            rowSum <span class="token operator">=</span> rowSum <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token comment">// 若当前位置累加值大于max，更新max</span>
            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> rowSum<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就相当于优化空间复杂度，不过时间复杂度还是一样的。</p><p>接下来我们看下如何通过分治法来解决这个问题。</p><p>首先看看书中提供的思路:</p>`,19),c=n(`<p>这是错的！这是错的！这是错的！</p><p>这里面第二点的描述，有间隔的情况，是错的，比如说下面这个数组:</p><p><code>[4, 6, -11, 9, 9 ,-11, 6, 4]</code></p><p>这里面的最大连续子数组是[9,9]，和是18，可是一分为二后，左边的数组是[4, 6, -11, 9],最大子数组和是10，右边同理，18不符合上面说的三种情况中的任何一种情况。</p><p>然而一开始因为我没意识到这个，一直尝试在理论层面证明它是对的。</p><p>我还真在理论层面证明它是错的，可是因为觉得书上是对的一直觉得自己是不是错了！最终没错，它就是错的！</p><p>气死了气死了。</p><p>言归正传，虽然书上这个思路是错的，不错这个题确实是可以通过分治法来解决的。</p><p>正确的思路是怎样的呢？</p><ol><li><p>将原数组拆分成两部分</p></li><li><p>在左右两个数组里分别寻找到最大子数组的和。</p></li><li><p>找到之后，此时最大子数组和是以下三个值的最大值。</p><ol><li>左边数组的最大子数组和</li><li>右边数组的最大子数组和</li><li>中间存在的包含这个中点的一个子数组里。 第3点稍微解释下，为什么呢？如果如果不包含中点，要么在左侧数组的一个子数组，要么是右边数组的一个子数组，由于左右两侧的最大子数组我们已经找到了，因此，这个子数组的和绝不可能比它们更大，除非这个子数组的区间包含了中点才有可能。</li></ol></li></ol><p>思路有了，分治法从思路到编码还是有一定难度，建议一定要动手尝试下，最终编成的代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">getMidlleMaxCount</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> leftCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  leftIndex <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> leftSum <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment">// 从中点往左边找最大连续子数组和</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>leftIndex <span class="token operator">&gt;=</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            leftCount <span class="token operator">=</span> leftCount <span class="token operator">+</span> nums<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span>
            leftSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftCount<span class="token punctuation">,</span> leftSum<span class="token punctuation">)</span>
            leftIndex <span class="token operator">--</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> rightCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rightIndex <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rightSum <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>rightIndex <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rightCount <span class="token operator">=</span> rightCount <span class="token operator">+</span> nums<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span>
            rightSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rightCount<span class="token punctuation">,</span> rightSum<span class="token punctuation">)</span>
            rightIndex <span class="token operator">++</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> leftSum <span class="token operator">+</span> rightSum <span class="token operator">+</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 给定一个数组，返回它的最大子数组和及该子数组的起始和结束位置的下标</span>
    <span class="token keyword">function</span> <span class="token function">getMaxCount</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token comment">// 终止条件，如果数组只有一个元素，直接返回</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">===</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
        <span class="token comment">// 对左右两半分别调用该函数</span>
        <span class="token keyword">const</span> letfMax <span class="token operator">=</span> <span class="token function">getMaxCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
        <span class="token keyword">const</span> rightMax <span class="token operator">=</span> <span class="token function">getMaxCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        <span class="token keyword">const</span> middleMax <span class="token operator">=</span> <span class="token function">getMidlleMaxCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>letfMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">,</span> middleMax<span class="token punctuation">)</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">getMaxCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于每次从中点开始找最大数组的复杂度为O(n)，所以该算法最终的时间复杂为O(n* log n)级别，总共提交并通过所有的测试用例了。</p>`,13);function l(u,i){return a(),p("div",null,[e,t(" ![](../images/maxCount.md) "),c])}const k=s(o,[["render",l],["__file","maxCountTotal2.html.vue"]]);export{k as default};
