import{_ as p,p as e,q as o,a1 as c}from"./framework-5866ffd3.js";const d={},a=c('<h1 id="如何使用或非运算实现与、或、非操作" tabindex="-1"><a class="header-anchor" href="#如何使用或非运算实现与、或、非操作" aria-hidden="true">#</a> 如何使用或非运算实现与、或、非操作？</h1><p>我们先来看下或非运算(将或非运算表示为符号⊕)的规则:</p><p>① <code> 1 ⊕ 1 = 0</code></p><p>② <code> 0 ⊕ 1 = 0</code></p><p>③ <code> 1 ⊕ 0 = 0</code></p><p>④ <code> 0 ⊕ 0 = 1</code></p><p>或非运算也叫异或运算，规则简述就是两个操作数相同值结果为真，不同时结果为假。</p><p>实际上，仅仅使用或非/与非运算，就可以实现与、或、非运算的效果。</p><p>怎么实现呢？</p><p>我们先思考最为基础的非运算的结果：</p><p>① <code>！1 = 0</code></p><p>① <code>！0 = 1 </code></p><p>也就是输入任意操作数(0或1)，我们希望得到相反的结果，现在我们能运用的只有或非运算的四条规则，怎么实现呢？</p><p>怎么可以观察一下上述的③、④两条规则，我们就会发现：</p><p>对于第③条规则，左边的操作数是1，当我们与右边的操作数0进行⊕运算的时候，会得到0。</p><p>对于第④条规则，左边的操作数是0，当我们与右边的操作数1进行⊕运算的时候，会得到1。</p><p>结果正好都是相反的，这正好就是我们想要的非操作的结果，而右边的操作数确是相同的，所以我们可以提取出一个共同的规则。</p><p>对于任意的一个操作数a，实现非操作的描述如下：</p><p><code>!a = a ⊕ 0 </code></p><p>接下来，我们在看看如何实现或操作，或操作的真值表如下：</p><p>① <code> 1 ⊕ 1 = 1</code></p><p>② <code> 0 ⊕ 1 = 1</code></p><p>③ <code> 1 ⊕ 0 = 1</code></p><p>④ <code> 0 ⊕ 0 = 0</code></p><p>可以看到，刚好与“或非”操作的真值表结果相反，实际上，或非或非，就是先或在非，所以，我们只要对或非运算在做一个非运算即可。</p><p>而我们刚刚已经实现了非操作。</p><p>两者结合，所以我们可以下出这样的定义：</p><p>对于任意两个操作数a、b,或操作的描述如下：</p><p><code>a | b = !(a ⊕ b) = a ⊕ b ⊕ 0</code></p><p>好的，接下来我们再看看与操作如何实现。</p><p>与操作的真值表如下：</p><p>① <code> 1 &amp; 1 = 1</code></p><p>② <code> 0 &amp; 1 = 0</code></p><p>③ <code> 1 &amp; 0 = 0</code></p><p>④ <code> 0 &amp; 0 = 0</code></p><p>这个规律比较隐蔽，与运算和或非运算的规律是什么呢？</p><p>是这样的：</p><p><strong>当我们把与预算的每一个输入取反（进行非运算）之后，进行或非运算，就会得到跟与运算相同的结果。</strong></p><p>例如：</p><ol><li>1 &amp; 1 改成 0 ⊕ 0 = 1</li><li>0 &amp; 1 改成 1 ⊕ 0 = 0</li><li>1 &amp; 0 改成 0 ⊕ 1 = 0</li><li>0 &amp; 0 改成 1 ⊕ 1 = 0</li></ol><p>根据这个规律，我们就可以写出与操作的定义了:</p><p>a &amp; b = !a ⊕ !b = ( a ⊕ 0 ) ⊕ ( b ⊕ 0 )</p><p>ok，本来的讲解，对于“如何用或非运算实现与、或、非运算？”到这里就结束了，实际上，使用“与非”操作，同样可以完成上述的推到，有兴趣的朋友可以参照上述的过程试一下。</p>',43),t=[a];function i(l,r){return e(),o("div",null,t)}const s=p(d,[["render",i],["__file","02.html.vue"]]);export{s as default};
